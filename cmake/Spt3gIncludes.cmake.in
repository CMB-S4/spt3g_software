# Use cmake directory for packages
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} $ENV{SITE_CMAKE_DIR} "${SPT3G_SOURCE_DIR}/cmake")

# Convenience variables
set(SPT3G_MODULE_DIR ${SPT3G_BUILD_DIR}/spt3g)
set(SPT3G_LIBRARY_DIR ${SPT3G_BUILD_DIR}/lib)
set(SPT3G_RUNTIME_DIR ${SPT3G_BUILD_DIR}/bin)

# Convenience macros
if(BUILD_WHEEL)
	macro(link_python_dir)
	endmacro(link_python_dir)
else()
macro(link_python_dir)
	execute_process(COMMAND mkdir -p ${SPT3G_MODULE_DIR})
	if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/python)
		execute_process(COMMAND ln -fsn ${CMAKE_CURRENT_SOURCE_DIR}/python ${SPT3G_MODULE_DIR}/${PROJECT})
		list(APPEND SPT3G_PYTHON_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/python)
	else(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/python)
		execute_process(COMMAND ln -fsn ${CMAKE_CURRENT_SOURCE_DIR} ${SPT3G_MODULE_DIR}/${PROJECT})
		list(APPEND SPT3G_PYTHON_DIRS ${CMAKE_CURRENT_SOURCE_DIR})
	endif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/python)
	set(SPT3G_PYTHON_DIRS ${SPT3G_PYTHON_DIRS} PARENT_SCOPE)
endmacro(link_python_dir)
endif()

find_package(OpenMP QUIET)
if(OPENMP_FOUND AND NOT TARGET OpenMP::OpenMP_CXX)
	find_package(Threads REQUIRED)
	add_library(OpenMP::OpenMP_CXX IMPORTED INTERFACE)
	set_property(TARGET OpenMP::OpenMP_CXX
		PROPERTY INTERFACE_COMPILE_OPTIONS ${OpenMP_CXX_FLAGS})
	# Only works if the same flag is passed to the linker; use CMake 3.9+ otherwise (Intel, AppleClang)
	set_property(TARGET OpenMP::OpenMP_CXX
		PROPERTY INTERFACE_LINK_LIBRARIES ${OpenMP_CXX_FLAGS} Threads::Threads)
endif()
macro(link_openmp lib_name)
	if (OPENMP_FOUND)
		target_link_libraries(${lib_name} PUBLIC OpenMP::OpenMP_CXX)
		target_compile_definitions(${lib_name} PUBLIC -DOPENMP_FOUND)
	endif()
endmacro(link_openmp lib_name)

macro(add_spt3g_program prog_name)
	set(prog_in ${CMAKE_CURRENT_SOURCE_DIR}/${prog_name})
	set(extra_macro_args ${ARGN})
	list(LENGTH extra_macro_args num_extra_args)
	if (${num_extra_args} GREATER 0)
		list(GET extra_macro_args 0 prog_out)
	else()
		get_filename_component(prog_out ${prog_in} NAME)
	endif()
	list(APPEND SPT3G_PROGRAMS ${prog_out})
	set(SPT3G_PROGRAMS ${SPT3G_PROGRAMS} PARENT_SCOPE)
	set(prog_out ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prog_out})
	execute_process(COMMAND ln -fsn ${prog_in} ${prog_out})
endmacro(add_spt3g_program prog_name)

macro(add_spt3g_library lib_name)
	add_library(${lib_name} ${ARGN})
	target_compile_features(${lib_name} PUBLIC cxx_std_11)
	set_target_properties(${lib_name} PROPERTIES PREFIX "libspt3g-")
	if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/include)
		target_include_directories(${lib_name} PUBLIC
			$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
			$<INSTALL_INTERFACE:${SPT3G_INCLUDE_INSTALL_DIR}/${lib_name}>)
	endif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/include)
	list(APPEND SPT3G_LIBRARIES ${lib_name})
	set(SPT3G_LIBRARIES ${SPT3G_LIBRARIES} PARENT_SCOPE)
	if(NOT BUILD_WHEEL)
		install(TARGETS ${lib_name} EXPORT ${PROJECT_NAME}Config LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}")
	endif()
endmacro(add_spt3g_library lib_name)

macro(add_spt3g_module lib_name)
	set(mod_name "_lib${lib_name}")
	if(${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.17)
		Python_add_library(${mod_name} MODULE WITH_SOABI ${ARGN})
	else()
		add_library(${mod_name} SHARED ${ARGN})
		set_target_properties(${mod_name} PROPERTIES PREFIX "" SUFFIX ".so")
		target_include_directories(${mod_name} PRIVATE ${Python_INCLUDE_DIRS})
		target_link_libraries(${mod_name} PUBLIC ${Python_LIBRARIES})
	endif()
	target_link_libraries(${mod_name} PUBLIC ${lib_name})
	set_target_properties(${mod_name} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${SPT3G_MODULE_DIR})
endmacro(add_spt3g_module lib_name)

macro(add_spt3g_test test_name)
	if(BUILD_WHEEL OR USER_TEST_ENV)
		set(TEST_PYEXEC python3)
	else()
		set(TEST_PYEXEC ${Python_EXECUTABLE})
	endif()
	add_test(${PROJECT}/${test_name} ${TEST_PYEXEC} ${CMAKE_CURRENT_SOURCE_DIR}/tests/${test_name}.py)

	set(extra_macro_args ${ARGN})
	list(LENGTH extra_macro_args num_extra_args)
	if(NOT BUILD_WHEEL AND NOT USER_TEST_ENV)
		# install wheel before testing
		set_tests_properties(${PROJECT}/${test_name} PROPERTIES ENVIRONMENT
			"PATH=${SPT3G_BUILD_DIR}/bin:$ENV{PATH};PYTHONPATH=${SPT3G_BUILD_DIR}:$ENV{PYTHONPATH};LD_LIBRARY_PATH=${SPT3G_BUILD_DIR}/lib:${SPT3G_BUILD_DIR}/spt3g:$ENV{LD_LIBRARY_PATH}")
	endif()
	if (${num_extra_args} GREATER 0)
		list(GET extra_macro_args 0 test_labels)
		set_tests_properties(${PROJECT}/${test_name} PROPERTIES LABELS ${test_labels})
	endif ()
endmacro(add_spt3g_test test_name)

if(BUILD_WHEEL)
	macro(add_spt3g_test_program test_name)
	endmacro(add_spt3g_test_program test_name)
else()
macro(add_spt3g_test_program test_name)
	if(PROJECT_NAME STREQUAL "spt3g") # internal use by this code
		set(TEST_NAME_PREFIX ${PROJECT})
		set(TEST_PROJECT_PREFIX "")
		set(IS_INTERNAL_TEST TRUE)
	else() # external use by down-stream code
		set(TEST_NAME_PREFIX ${PROJECT_NAME})
		set(TEST_PROJECT_PREFIX "spt3g::")
		set(IS_INTERNAL_TEST FALSE)
	endif()
	
	cmake_parse_arguments("ADD_TEST_PROGRAM"
	                      "" # options
	                      "" # one value keywords
	                      "SOURCE_FILES;TEST_LABELS;USE_PROJECTS" # multi-value arguments
	                      ${ARGN}
	                      )
	
	add_test(NAME ${TEST_NAME_PREFIX}/${test_name}
	         WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
	         COMMAND ${TEST_NAME_PREFIX}-${test_name}
	         )
	
	if(ADD_TEST_PROGRAM_TEST_LABELS)
		set_tests_properties(${TEST_NAME_PREFIX}/${test_name} PROPERTIES LABELS ${ADD_TEST_PROGRAM_TEST_LABELS})
	endif(ADD_TEST_PROGRAM_TEST_LABELS)
	
	if(NOT EXISTS ${PROJECT_BINARY_DIR}/Spt3gTestMain.cxx)
		file(WRITE ${PROJECT_BINARY_DIR}/Spt3gTestMain.cxx "#include <G3Test.h>\nG3TEST_MAIN_IMPL\n")
	endif(NOT EXISTS ${PROJECT_BINARY_DIR}/Spt3gTestMain.cxx)
	
	add_executable(${TEST_NAME_PREFIX}-${test_name}
	               ${PROJECT_BINARY_DIR}/Spt3gTestMain.cxx
	               ${ADD_TEST_PROGRAM_SOURCE_FILES}
	               )
	target_include_directories(${TEST_NAME_PREFIX}-${test_name} PRIVATE ${CMAKE_SOURCE_DIR}/cmake)
	
	foreach(USED_PROJECT ${ADD_TEST_PROGRAM_USE_PROJECTS})
		if(IS_INTERNAL_TEST)
			if(NOT IS_DIRECTORY ${CMAKE_SOURCE_DIR}/${USED_PROJECT})
				message(FATAL_ERROR "Attempt to use nonexistent project '${USED_PROJECT}'")
			endif(NOT IS_DIRECTORY ${CMAKE_SOURCE_DIR}/${USED_PROJECT})
			if(NOT EXISTS ${CMAKE_SOURCE_DIR}/${USED_PROJECT}/CMakeLists.txt)
				message(FATAL_ERROR "Attempt to use project '${USED_PROJECT}'. There is a directory but no CMakeLists.txt. . . is this a valid project?")
			endif(NOT EXISTS ${CMAKE_SOURCE_DIR}/${USED_PROJECT}/CMakeLists.txt)
		
			target_include_directories(${TEST_NAME_PREFIX}-${test_name} PRIVATE ${CMAKE_SOURCE_DIR}/${USED_PROJECT}/include)
		else(IS_INTERNAL_TEST)
			list(FIND SPT3G_LIBRARIES "${TEST_PROJECT_PREFIX}${USED_PROJECT}" PROJECT_INDEX)
			if(PROJECT_INDEX EQUAL -1)
				message(FATAL_ERROR "Attempt to use nonexistent project '${USED_PROJECT}'")
			endif(PROJECT_INDEX EQUAL -1)
			
			target_include_directories(${TEST_NAME_PREFIX}-${test_name} PRIVATE "${SPT3G_INCLUDE_INSTALL_DIR}/${USED_PROJECT}")
		endif(IS_INTERNAL_TEST)
		
		target_link_libraries(${TEST_NAME_PREFIX}-${test_name} PRIVATE ${TEST_PROJECT_PREFIX}${USED_PROJECT})
	endforeach(USED_PROJECT ${ADD_TEST_PROGRAM_USE_PROJECTS})
	if(NOT IS_INTERNAL_TEST)
		target_include_directories(dependent PRIVATE ${SPT3G_INCLUDE_DIRS})
	endif()
endmacro(add_spt3g_test_program test_name)
endif()
