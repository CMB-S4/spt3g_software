name: Wheels

on:
  workflow_dispatch:
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_wheels:
    name: Build wheels for ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macos-13 is an intel runner, macos-14 is apple silicon
          - os: macos-13
            build: cp38-macosx_x86_64
            target: 13.0
          - os: macos-13
            build: cp39-macosx_x86_64
            target: 13.0
          - os: macos-13
            build: cp310-macosx_x86_64
            target: 13.0
          - os: macos-13
            build: cp311-macosx_x86_64
            target: 13.0
          - os: macos-13
            build: cp312-macosx_x86_64
            target: 13.0
          - os: macos-13
            build: cp313-macosx_x86_64
            target: 13.0

          - os: macos-14
            build: cp39-macosx_arm64
            target: 14.0
          - os: macos-14
            build: cp310-macosx_arm64
            target: 14.0
          - os: macos-14
            build: cp311-macosx_arm64
            target: 14.0
          - os: macos-14
            build: cp312-macosx_arm64
            target: 14.0
          - os: macos-14
            build: cp313-macosx_arm64
            target: 14.0

          - os: ubuntu-latest
            build: cp38-manylinux_x86_64
          - os: ubuntu-latest
            build: cp39-manylinux_x86_64
          - os: ubuntu-latest
            build: cp310-manylinux_x86_64
          - os: ubuntu-latest
            build: cp311-manylinux_x86_64
          - os: ubuntu-latest
            build: cp312-manylinux_x86_64
          - os: ubuntu-latest
            build: cp313-manylinux_x86_64

    steps:
      - name: Set macOS deployment target
        if: runner.os == 'macOS'
        run: echo "MACOSX_DEPLOYMENT_TARGET=${{ matrix.target }}" >> $GITHUB_ENV

      # missing build tools on some macos runners
      - name: Install macOS build dependencies
        if: runner.os == 'macOS'
        run: brew install automake libtool

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.0
        env:
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_BEFORE_ALL_LINUX: yum install -y zlib-devel bzip2-devel xz-devel netcdf-devel
          CIBW_BEFORE_ALL_MACOS: brew install netcdf
          CIBW_BEFORE_BUILD_MACOS: >
            ln -s $(dirname $(readlink -f $(which python3)))/python3-config $(dirname $(which python3))/python3-config &&
            pip install cmake && ./deps/install_flac.sh && ./deps/install_boost.sh
          CIBW_BEFORE_BUILD_LINUX: >
            pip install cmake && ./deps/install_flac.sh && ./deps/install_boost.sh
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            LD_LIBRARY_PATH=$PWD/deps/lib auditwheel repair -w {dest_dir} {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=$PWD/deps/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT_LINUX: >
            CMAKE_BUILD_PARALLEL_LEVEL=4
            CMAKE_PREFIX_PATH=$PWD/deps
            CC=gcc
            CXX=g++
            CFLAGS="-O3 -fPIC"
          CIBW_ENVIRONMENT_MACOS: >
            CMAKE_BUILD_PARALLEL_LEVEL=4
            CMAKE_PREFIX_PATH=$PWD/deps
            CC=clang
            CXX=clang++
            CFLAGS="-O3 -fPIC"
          CIBW_TEST_COMMAND: ctest --test-dir {package}/build --output-on-failure

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheel-${{ matrix.build }}
          path: ./wheelhouse/spt3g*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
