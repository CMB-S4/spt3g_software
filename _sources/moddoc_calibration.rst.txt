.. include:: intro_calibration.rst

API Documentation
=================

.. contents:: Contents
   :depth: 1
   :local:

Frame Objects
-------------

Serializable objects that may be stored as entries in :py:class:`~spt3g.core.G3Frame` objects.

.. autoclass:: spt3g.calibration.BolometerProperties

.. autoclass:: spt3g.calibration.BolometerPropertiesMap

.. autoclass:: spt3g.calibration.PointingProperties

.. autoclass:: spt3g.calibration.PointingPropertiesMap

Class-like Pipeline Modules
---------------------------


Classes that can be added to :py:class:`~spt3g.core.G3Pipeline`
instances, either written as callable objects in Python (see
:ref:`class-modules`) or as :py:class:`~spt3g.core.G3Module`-derived
classes in C++ (see :ref:`cxx-modules`).  Aside from adding these into
pipelines using the standard ``Add()`` method, such objects may also be
instantiated outside of pipelines to make use of additional features.

One typical use case is to extract some kind of data from a series of
frames::

    class ExtractData:
        def __init__(self, key="RawTimestreams"):
            self.key = key
            self.data = []
        def __call__(self, frame):
            if self.key in frame:
                self.data.append(frame[self.key])

    # instantiate caching class
    extractor = ExtractData()

    # use instance in a pipeline
    pipe = core.G3Pipeline()
    pipe.Add(core.G3Reader, filename="file.g3")
    pipe.Add(extractor)
    pipe.Run()

    # use extracted data in later processing
    print(extractor.data)

Another use case may be to call additional methods of a class.  For
example, the :py:class:`~spt3g.core.G3Writer` class can be used as a
context manager, and also report the position of the file pointer after
each frame is written::

    with core.G3Writer("file.g3") as writer:
        for frame in frames:
            writer(frame)
            print("Bytes written:", writer.tell())

Class-like modules permit a variety of additional features beyond
their standard usage in pipelines.


.. autoclass:: spt3g.calibration.bolopropertiesutils.SplitByBand

.. autoclass:: spt3g.calibration.bolopropertiesutils.SplitByPixelType

.. autoclass:: spt3g.calibration.bolopropertiesutils.SplitByProperty

.. autoclass:: spt3g.calibration.bolopropertiesutils.SplitByWafer

.. autoclass:: spt3g.calibration.bolopropertiesutils.SplitTimestreamsByBand

.. autoclass:: spt3g.calibration.build_cal_frames.BuildBoloPropertiesMap

.. autoclass:: spt3g.calibration.build_cal_frames.BuildPointingProperties

.. autoclass:: spt3g.calibration.build_cal_frames.MergeCalibrationFrames

Function-like Pipeline Modules
------------------------------

Python functions that can be added to :py:class:`~spt3g.core.G3Pipeline` instances. Such functions may also be called directly with a :py:class:`~spt3g.core.G3Frame` object as the first argument, and do not necessarily need to be used in a pipeline. See :ref:`function-modules` for more detail.

.. autofunction:: spt3g.calibration.build_cal_frames.ExplodeBolometerProperties

Useful Functions
----------------

Various Python and C++ functions that are part of the public API.

.. autofunction:: spt3g.calibration.bolopropertiesutils.band_to_string

.. autofunction:: spt3g.calibration.bolopropertiesutils.band_to_value

.. autofunction:: spt3g.calibration.bolopropertiesutils.extract_band_string

.. autofunction:: spt3g.calibration.bolopropertiesutils.extract_band_value

.. autofunction:: spt3g.calibration.bolopropertiesutils.get_band_units

.. autofunction:: spt3g.calibration.bolopropertiesutils.set_band_format


