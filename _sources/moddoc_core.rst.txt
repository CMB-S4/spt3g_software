----
core
----

The core directory includes infrastructural components of the software: file IO, python bindings, basic containers for plain data, the definition of G3Pipeline, etc.


Modules in spt3g.core
=====================
* spt3g.core.util.AbortAfterNFrames_

* spt3g.core.util.DeduplicateMetadata_

* spt3g.core.util.Delete_

* spt3g.core.util.DropOrphanMetadata_

* spt3g.core.util.Dump_

* spt3g.core.util.G3NetworkReceiver_

* spt3g.core.util.G3ThrottledNetworkSender_

* spt3g.core.util.InjectDebug_

* spt3g.core.util.InjectFrame_

* spt3g.core.util.Rename_


.. _spt3g.core.util.AbortAfterNFrames:

**spt3g.core.util.AbortAfterNFrames**

Stops processing after n_frames frames go by

*Constructor:*
	``AbortAfterNFrames(self, type, n_frames)``




.. _spt3g.core.util.DeduplicateMetadata:

**spt3g.core.util.DeduplicateMetadata**

Drop metadata frames (e.g. Calibration, Wiring) for which the previous
metadata frame of the same type is byte-for-byte identical. This can be
handy when, for example, reading in many files from the G3MultiFileWriter,
which copies metadata frames to the beginning of each file. Considers
all frames not in <dataframetypes> to be metadata (by default, everything
except Timepoint and Scan frames).

*Constructor:*
	``DeduplicateMetadata(self, dataframetype=[spt3g._libcore.G3FrameType.Timepoint, spt3g._libcore.G3FrameType.Scan])``




.. _spt3g.core.util.Delete:

**spt3g.core.util.Delete**

Deletes specified keys from frame. If optional type specified, only acts on frames of the given type.


*Definition:*
        ``Delete(frame, keys=[], type=None)``




.. _spt3g.core.util.DropOrphanMetadata:

**spt3g.core.util.DropOrphanMetadata**

Remove metadata frames (e.g. Calibration, Wiring) without
intervening data frames (e.g. Timepoint, Scan, specified by the
<dataframetype> argument to the constructor). The metadata frames that
do show up will be the most recent of each type and appear in their
original order.

*Constructor:*
	``DropOrphanMetadata(self, dataframetype=[spt3g._libcore.G3FrameType.Timepoint, spt3g._libcore.G3FrameType.Scan])``




.. _spt3g.core.util.Dump:

**spt3g.core.util.Dump**

Prints frames to console. If optional type specified, only acts on frames of the given type.


*Definition:*
        ``Dump(frame, type=None, added_message=None)``




.. _spt3g.core.util.G3NetworkReceiver:

**spt3g.core.util.G3NetworkReceiver**


Emulation of old G3NetworkReceiver class. Equivalent to pointing
G3Reader at a TCP URL.



*Equivalent to:*

.. code-block:: python

    pipe.Add(spt3g._libcore.G3Reader, filename='tcp://localhost:5978')



*Definition:*
        ``G3NetworkReceiver(pipe, hostname='localhost', port=5978)``



.. _spt3g.core.util.G3ThrottledNetworkSender:

**spt3g.core.util.G3ThrottledNetworkSender**

Send every Nth frame of certain types using a wrapped G3NetworkSender.
All instances of frames not in the dictionary frame_decimation will be sent
at their full rate.

*Constructor:*
	``G3ThrottledNetworkSender(self, hostname='*', port=5978, frame_decimation={spt3g._libcore.G3FrameType.Timepoint: 10}, max_queue_size=0)``




.. _spt3g.core.util.InjectDebug:

**spt3g.core.util.InjectDebug**

starts a pdb session when a frame of type shows up.

The frame data is stored in the variable names "frame".

If debug_start_func is not None, only starts a debug session when 
        debug_start_func(frame) == True



*Definition:*
        ``InjectDebug(frame, type=None, debug_start_func=None)``




.. _spt3g.core.util.InjectFrame:

**spt3g.core.util.InjectFrame**

Inject an arbitrary frame into a pipeline.

*Arguments:*
	frame : G3Frame
	    The frame to inject

*Constructor:*
	``InjectFrame(self, frame)``




.. _spt3g.core.util.Rename:

**spt3g.core.util.Rename**

Renames specified keys in frame. If optional type specified, only acts on frames of the given type. Argument is a dictionary mapping old names to new ones.


*Definition:*
        ``Rename(frame, keys={}, type=None)``



Functions in spt3g.core
=======================
* spt3g.core.timestreamextensions.concatenate_timestreams_


.. _spt3g.core.timestreamextensions.concatenate_timestreams:

**spt3g.core.timestreamextensions.concatenate_timestreams**

Concatenate G3Timestream or G3TimestreamMap objects together.

*Arguments:*
	ts_lst : list
	    list of G3Timestream or G3TimestreamMap objects.  Must all be
	    the same type.
	ts_rounding_error : float
	    allowed error in timestream separation such that timestreams are
	    contiguous, as a fraction of the sample rate. This should be
	    0 by default, but is 0.5 to allow for downsampler shifting,
	    and then bumpted again to 0.6 to allow for floating-point
	    errors in what 0.5 is.
	ts_interp_threshold : float
	    allowed timestream separation below which gaps between timestreams are
	    interpolated to be made continuous
	
*Returns:*
	ts : G3Timestream or G3TimestreamMap object
	    The concatenation of the input list of objects

*Definition:*
        ``concatenate_timestreams(ts_lst, ts_rounding_error=0.6, ts_interp_threshold=0)``




